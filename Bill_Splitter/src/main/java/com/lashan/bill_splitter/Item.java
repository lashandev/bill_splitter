/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lashan.bill_splitter;

import com.lashan.bill_splitter.db.DBConf;
import java.awt.Component;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Lashan
 */
public class Item extends javax.swing.JFrame {

    /**
     * Creates new form Item
     */
    public Item() {
        initComponents();
        setLocationRelativeTo(null);
        loadSession();
        refreshItemTable();
        refreshSourceTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        combo_sessiondata = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_ammount = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_tax = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_total = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        targetTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        sourceTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Session");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Details"));

        jLabel2.setText("Name");

        txt_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nameActionPerformed(evt);
            }
        });

        jLabel3.setText("Amount");

        txt_ammount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_ammountActionPerformed(evt);
            }
        });

        jLabel4.setText("Tax");

        txt_tax.setText("0");
        txt_tax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_taxActionPerformed(evt);
            }
        });

        jLabel5.setText("Total");

        txt_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txt_tax, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_ammount, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_ammount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_tax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Qty", "Total"
            }
        ));
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);
        if (itemTable.getColumnModel().getColumnCount() > 0) {
            itemTable.getColumnModel().getColumn(0).setMinWidth(50);
            itemTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            itemTable.getColumnModel().getColumn(0).setMaxWidth(50);
            itemTable.getColumnModel().getColumn(2).setMinWidth(50);
            itemTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            itemTable.getColumnModel().getColumn(2).setMaxWidth(50);
            itemTable.getColumnModel().getColumn(3).setMinWidth(100);
            itemTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            itemTable.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        targetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event ID", "Name"
            }
        ));
        jScrollPane3.setViewportView(targetTable);
        if (targetTable.getColumnModel().getColumnCount() > 0) {
            targetTable.getColumnModel().getColumn(0).setMinWidth(100);
            targetTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            targetTable.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        sourceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event ID", "Name"
            }
        ));
        jScrollPane4.setViewportView(sourceTable);
        if (sourceTable.getColumnModel().getColumnCount() > 0) {
            sourceTable.getColumnModel().getColumn(0).setMinWidth(100);
            sourceTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            sourceTable.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        jButton3.setText(">>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("<<");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Home");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Load");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(combo_sessiondata, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo_sessiondata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultTableModel sourceModel = (DefaultTableModel) sourceTable.getModel();
        DefaultTableModel targetModel = (DefaultTableModel) targetTable.getModel();
        moveSelectedRows(targetTable, targetModel, sourceTable, sourceModel);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            String item = itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString();
            String item_name = itemTable.getValueAt(itemTable.getSelectedRow(), 1).toString();
            String member = "";
            for (int row = 0; row < targetTable.getRowCount(); row++) {
                String eventdata = targetTable.getValueAt(row, 0).toString();
                String member_name = targetTable.getValueAt(row, 1).toString();

                String chekingSql = "select * from event_item where eventdata='" + eventdata + "' and item='" + item + "'";
                ResultSet rs = DBConf.search(chekingSql);
                if (!rs.next()) {
                    String sql = "insert into event_item (eventdata,item)values('" + eventdata + "','" + item + "')";
                    DBConf.iud(sql);
                    member += member_name + "\n";
                }

            }
            JOptionPane.showMessageDialog(this, item_name + " merged to below Member"
                    + "\n" + member);
            refreshFrame();
        } catch (Exception e) {
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        HomePage homePage = new HomePage();
        homePage.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        refreshSourceTable();
        refreshItemTable();
        refreshTargetTable();

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String session = combo_sessiondata.getSelectedItem().toString().split("-")[0];
            String sql = "insert into item ('sessiondata','name','amount','tax','total')values('"
                    + session + "','" + txt_name.getText() + "','" + txt_ammount.getText()
                    + "','" + txt_tax.getText() + "','" + txt_total.getText() + "')";
            DBConf.iud(sql);
            refreshFrame();
            refreshSourceTable();
            refreshItemTable();
            refreshTargetTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel sourceModel = (DefaultTableModel) sourceTable.getModel();
        DefaultTableModel targetModel = (DefaultTableModel) targetTable.getModel();
        moveSelectedRows(sourceTable, sourceModel, targetTable, targetModel);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        try {
            String item = itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString();
            String sql = "select e.id,m.name from event_item x INNER JOIN eventdata e on "
                    + "x.eventdata = e.id INNER JOIN member m on e.member=m.id where x.item = '" + item + "'";
            ResultSet rs = DBConf.search(sql);
            DefaultTableModel dtm = (DefaultTableModel) targetTable.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {
                Vector row = new Vector();
                row.add(rs.getString(1));
                row.add(rs.getString(2));
                dtm.addRow(row);
            }

            realData();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_itemTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_ammountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_ammountActionPerformed
        txt_tax.setText("0");
        txt_total.setText(txt_ammount.getText());
        txt_tax.grabFocus();
    }//GEN-LAST:event_txt_ammountActionPerformed

    private void txt_taxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_taxActionPerformed
        txt_total.grabFocus();
    }//GEN-LAST:event_txt_taxActionPerformed

    private void txt_totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalActionPerformed
        try {
            String session = combo_sessiondata.getSelectedItem().toString().split("-")[0];
            String sql = "insert into item ('sessiondata','name','amount','tax','total')values('"
                    + session + "','" + txt_name.getText() + "','" + txt_ammount.getText()
                    + "','" + txt_tax.getText() + "','" + txt_total.getText() + "')";
            DBConf.iud(sql);
            refreshFrame();
            refreshSourceTable();
            refreshItemTable();
            refreshTargetTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
        txt_name.grabFocus();
    }//GEN-LAST:event_txt_totalActionPerformed

    private void txt_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nameActionPerformed
        txt_ammount.grabFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Item.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Item.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Item.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Item.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Item().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo_sessiondata;
    private javax.swing.JTable itemTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable sourceTable;
    private javax.swing.JTable targetTable;
    private javax.swing.JTextField txt_ammount;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_tax;
    private javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables
private void loadSession() {

        String sql = "select * from sessiondata where active='1' order by id desc";
        try {
            ResultSet rs = DBConf.search(sql);
            Vector row = new Vector();
            while (rs.next()) {
                row.add(rs.getString("id") + "-" + rs.getString("name") + "-" + rs.getString("place") + "-" + rs.getString("date"));
            }
            combo_sessiondata.setModel(new DefaultComboBoxModel<>(row));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void refreshFrame() {
        clearTextFields();
//        id = null;
    }

    private void clearTextFields() {
        for (Component c : jPanel1.getComponents()) {
            if (c instanceof JTextComponent) {
                JTextComponent text = (JTextComponent) c;
                text.setText(null);
            }
        }
    }

    private void refreshItemTable() {
        try {
            String session = combo_sessiondata.getSelectedItem().toString().split("-")[0];
            DefaultTableModel dtm2 = (DefaultTableModel) itemTable.getModel();
            dtm2.setRowCount(0);
            String sql2 = "select * from item where sessiondata='" + session + "'";
            ResultSet rs2 = DBConf.search(sql2);
            while (rs2.next()) {
                Vector row = new Vector();
                row.add(rs2.getString(1));
                row.add(rs2.getString(3));
                row.add(rs2.getString(4));
                row.add(rs2.getString(6));
                dtm2.addRow(row);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void refreshSourceTable() {
        String session = combo_sessiondata.getSelectedItem().toString().split("-")[0];
        DefaultTableModel dtm = (DefaultTableModel) sourceTable.getModel();
        dtm.setRowCount(0);

        try {
            String sql1 = "select e.id,m.name from eventdata e inner join member m on e.member=m.id where e.sessiondata='" + session + "'";
            ResultSet rs = DBConf.search(sql1);
            while (rs.next()) {
                Vector row = new Vector();
                row.add(rs.getString(1));
                row.add(rs.getString(2));
                dtm.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void realData() {
        String session = combo_sessiondata.getSelectedItem().toString().split("-")[0];
        String item = itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString();
        DefaultTableModel dtm = (DefaultTableModel) sourceTable.getModel();
        dtm.setRowCount(0);

        try {
            String sql1 = "select e1.id,m1.name from eventdata e1 inner join member m1 on e1.member=m1.id where e1.sessiondata='"
                    + session + "' and e1.id not in(select e.id from event_item x INNER JOIN eventdata e on x.eventdata = e.id "
                    + "INNER JOIN member m on e.member=m.id where x.item = '" + item + "')";
            ResultSet rs = DBConf.search(sql1);
            while (rs.next()) {
                Vector row = new Vector();
                row.add(rs.getString(1));
                row.add(rs.getString(2));
                dtm.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void moveSelectedRows(JTable sourceTable, DefaultTableModel sourceModel,
            JTable destinationTable, DefaultTableModel destinationModel) {
        int[] selectedRows = sourceTable.getSelectedRows();

        for (int i = selectedRows.length - 1; i >= 0; i--) {
            Vector<Object> rowData = new Vector<>();
            for (int j = 0; j < sourceModel.getColumnCount(); j++) {
                rowData.add(sourceModel.getValueAt(selectedRows[i], j));
            }
            destinationModel.addRow(rowData);
            sourceModel.removeRow(selectedRows[i]);
        }
    }

    private void refreshTargetTable() {
        DefaultTableModel dtm = (DefaultTableModel) targetTable.getModel();
        dtm.setRowCount(0);
    }
}
